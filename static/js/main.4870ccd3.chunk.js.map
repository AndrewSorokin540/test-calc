{"version":3,"sources":["components/InvestmentSumm/InvestmentSumm.jsx","components/InvestmentPeriod/InvestmentPeriod.jsx","components/InvestmentAdding/InvestmentAdding.jsx","components/Result/Result.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["InvestmentSumm","props","investmentSummArrLastChild","investmentSummArr","length","handleInputChange","e","currentTarget","value","setState","currentInvestmentSumm","updateInvestmentSumm","state","this","currentProgress","investScaleStep","sliderticks","map","el","i","key","className","style","left","hidden","type","onClick","Form","onInput","width","min","max","step","list","React","Component","InvestmentPeriod","addingPercent","updateAddingPercent","periods","id","name","htmlFor","percent","period","InvestmentAdding","investmentSumm","investmentSummHeight","investmentAddingHeight","Row","Col","xs","toLocaleString","height","Math","round","Result","Button","data","addingPercentArray","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4870ccd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Form } from 'reactstrap';\r\nimport './InvestmentSumm.scss';\r\n\r\nclass InvestmentSumm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentInvestmentSumm: this.props.investmentSummArr[0],\r\n        };\r\n    }\r\n\r\n    investmentSummArrLastChild = this.props.investmentSummArr[this.props.investmentSummArr.length - 1];\r\n\r\n    handleInputChange = e => {\r\n        if (e.currentTarget.value > this.investmentSummArrLastChild) {\r\n            e.currentTarget.value = this.investmentSummArrLastChild\r\n        }\r\n        this.setState({ currentInvestmentSumm: +(e.currentTarget.value) });\r\n        this.props.updateInvestmentSumm(e.currentTarget.value);\r\n    };\r\n\r\n    \r\n\r\n    render() {\r\n        const investmentSummArr = this.props.investmentSummArr;\r\n        let currentProgress = (this.state.currentInvestmentSumm / (investmentSummArr[investmentSummArr.length - 1]) * 100 + '%');\r\n\r\n        const investScaleStep = 100 / this.investmentSummArrLastChild;\r\n        const sliderticks = this.props.investmentSummArr.map((el, i) => (\r\n            <label key={i} className=\"rangeLink\" style={{ left: `${investScaleStep * el}%` }}>\r\n                <span className=\"d-table\" >{el / 1000}т.</span>\r\n                <input hidden type=\"text\" value={`${+el}`} onClick={this.handleInputChange} />\r\n            </label>\r\n        ))\r\n        return (\r\n            <Form className=\"investment-summ p-4\">\r\n                <div className=\"d-flex align-items-center justify-content-between mb-5\">\r\n                    <span>Сумма для инвестирования</span>\r\n                    <input type=\"text\" className=\"investment-summ__summ rounded-pill bg-white border border-secondary\"\r\n                        value={this.state.currentInvestmentSumm}\r\n                        onInput={this.handleInputChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div className=\"range\">\r\n                        <span className=\"range__total\" />\r\n                        <span className=\"range__progress\" style={{ width: currentProgress }} />\r\n                        <input\r\n                            onInput={this.handleInputChange}\r\n                            type=\"range\"\r\n                            min={investmentSummArr[0]}\r\n                            max={(investmentSummArr[investmentSummArr.length - 1])}\r\n                            value={(this.state.currentInvestmentSumm)}\r\n                            step=\"1\"\r\n                            list=\"steplist\" />\r\n                        <div className=\"sliderticks\">\r\n                            {sliderticks}\r\n                        </div>\r\n                        <span className=\"range__thumb\" style={{ left: currentProgress }}></span>\r\n                    </div>\r\n                </div>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nInvestmentSumm.propTypes = {\r\n    investmentSummArr: propTypes.array,\r\n}\r\n\r\nexport default InvestmentSumm;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Form } from 'reactstrap';\r\nimport './InvestmentPeriod.scss';\r\n\r\nfunction InvestmentPeriod({ addingPercent, updateAddingPercent }) {\r\n\r\n    const periods = addingPercent.map((el, i) => (\r\n        <div className=\"d-inline\" key={i}>\r\n            <input type=\"radio\" className=\"investment-period__input\" id={`investment-period-${i}`}\r\n                name=\"contact\" value=\"email\" hidden />\r\n            <label htmlFor={`investment-period-${i}`} className=\"investment-period__label border border-secondary rounded-pill px-2 py-1 mr-3 bg-white size12\"\r\n                onClick={() => { updateAddingPercent(el.percent) }}\r\n            >{el.period}</label>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <Form className=\"investment-period p-4\">\r\n            <p className=\"mb-4\">Срок инвестирования</p>\r\n            {periods}\r\n        </Form>\r\n    )\r\n}\r\n\r\nInvestmentPeriod.propTypes = {\r\n    addingPercent: propTypes.arrayOf(propTypes.object),\r\n    updateAddingPercent: propTypes.func,\r\n}\r\n\r\nexport default InvestmentPeriod;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap'\r\nimport './InvestmentAdding.scss';\r\n\r\nfunction InvestmentAdding({ investmentSummArr, investmentSumm, addingPercent }) {\r\n\r\n    let investmentSummHeight = investmentSumm / (investmentSummArr[investmentSummArr.length - 1]) * 50 + '%';\r\n    let investmentAddingHeight = addingPercent * investmentSumm / investmentSummArr[0] / 2 + '%';\r\n\r\n    return (\r\n        <div className=\"investment-adding pl-4 pt-4 pr-4 text-center\">\r\n            <Row className=\"align-items-end\">\r\n                <Col xs={6} className=\"investment-adding__col\">\r\n                    <div className=\"value-container\">\r\n                        <div>Инвестиции</div>\r\n                        <span className=\"size18\">{(+investmentSumm).toLocaleString()}<i className=\"rouble\">руб.</i></span>\r\n                        <div className=\"invest-value\" style={{ height: investmentSummHeight }}></div>\r\n                    </div>\r\n                </Col>\r\n                <Col xs={6} className=\"investment-adding__col\">\r\n                    <div className=\"value-container\">\r\n                        <div>Прирост стоимости паев</div>\r\n                        <span className=\"size18\">{(+investmentSumm * addingPercent).toLocaleString('ru')}<i className=\"rouble\">руб.</i></span>\r\n                        <div className=\"adding-value\" style={{ height: investmentAddingHeight }}></div>\r\n                        <div className=\"invest-value\" style={{ height: investmentSummHeight }}></div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <hr />\r\n            <p className=\"size14\">Прирост стоимости паев <span>{(Math.round(addingPercent * 10000)) / 100}%</span></p>\r\n            <hr className=\"mb-0\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nInvestmentAdding.propTypes = {\r\n    investmentSummArr: propTypes.array,\r\n    investmentSumm: propTypes.number,\r\n    addingPercent: propTypes.number\r\n}\r\n\r\nexport default InvestmentAdding;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Button } from 'reactstrap'\r\nimport './Result.scss';\r\n\r\nfunction Result({ investmentSumm, addingPercent }) {\r\n    return (\r\n        <div className=\"result\">\r\n            <div className=\"size22\">Стоимость паев</div>\r\n            <div className=\"result__profit\">{Math.round((+investmentSumm + (+investmentSumm * +addingPercent))).toLocaleString()}<i className=\"rouble\">руб.</i></div>\r\n            <Button className=\"rounded-pill result__btn\">Получить</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nResult.propTypes = {\r\n    investmentSumm: propTypes.number,\r\n    addingPercent: propTypes.number\r\n}\r\n\r\nexport default Result;","const data = {\r\n    addingPercentArray: [\r\n        {\r\n            percent: .048,\r\n            period: '3 месяца'\r\n        },\r\n        {\r\n            percent: .0928,\r\n            period: '6 месяцев'\r\n        },\r\n        {\r\n            percent: .1372,\r\n            period: '1 год'\r\n        },\r\n        {\r\n            percent: .1435,\r\n            period: '2 года'\r\n        },\r\n        {\r\n            percent: .2569,\r\n            period: '3 года'\r\n        },\r\n    ],\r\n\r\n    investmentSummArr: [\r\n        50000, 500000, 1000000, 2000000, 3000000, 3000000,\r\n    ]\r\n}\r\n\r\nexport default data;","import React from 'react';\nimport './App.scss';\nimport { Container } from 'reactstrap';\nimport InvestmentSumm from './components/InvestmentSumm/InvestmentSumm';\nimport InvestmentPeriod from './components/InvestmentPeriod/InvestmentPeriod';\nimport InvestmentAdding from './components/InvestmentAdding/InvestmentAdding';\nimport Result from './components/Result/Result';\nimport data from 'data';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      addingPercent: 0,\n      investmentSumm: data.investmentSummArr[0],\n    };\n  }\n\n  updateInvestmentSumm = (value) => {\n    this.setState({ investmentSumm: +(value) })\n  }\n\n  updateAddingPercent = (value) => {\n    this.setState({ addingPercent: +(value) })\n  }\n\n\n\n  render() {\n    return (\n      <Container>\n        <div className=\"App\">\n          <p className=\"App-title text-center\">Калькулятор</p>\n          <div className=\"app-body d-flex flex-wrap\">\n            <InvestmentSumm\n              updateInvestmentSumm={this.updateInvestmentSumm}\n              investmentSummArr={data.investmentSummArr}\n\n            />\n            <InvestmentAdding\n              investmentSummArr={data.investmentSummArr}\n              investmentSumm={this.state.investmentSumm}\n              addingPercent={this.state.addingPercent}\n            />\n            <InvestmentPeriod\n              updateAddingPercent={this.updateAddingPercent}\n              addingPercent={data.addingPercentArray}\n            />\n            <Result\n              investmentSumm={this.state.investmentSumm}\n              addingPercent={this.state.addingPercent} />\n          </div>\n        </div>\n      </Container>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}